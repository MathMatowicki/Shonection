// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shonection.DAL;

namespace shonection.Migrations
{
    [DbContext(typeof(ShoppingContext))]
    [Migration("20201201111955_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EFGetStarted.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoginId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdminId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.HasIndex("ShopId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("EFGetStarted.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("BrandId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("EFGetStarted.BrandModel", b =>
                {
                    b.Property<int>("BrandModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BrandModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductTypeId");

                    b.ToTable("BrandModel");
                });

            modelBuilder.Entity("EFGetStarted.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("EFGetStarted.CartProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("EFGetStarted.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top")
                        .HasColumnType("INTEGER");

                    b.Property<int>("_lft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("_rgt")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EFGetStarted.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Country");
                });

            modelBuilder.Entity("EFGetStarted.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EmailVerified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RememberToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Login");
                });

            modelBuilder.Entity("EFGetStarted.MOption", b =>
                {
                    b.Property<int>("MOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("MOptionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MOption");
                });

            modelBuilder.Entity("EFGetStarted.MOptionValue", b =>
                {
                    b.Property<int>("MOptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MOptionValueId");

                    b.HasIndex("MOptionId");

                    b.ToTable("MOptionValue");
                });

            modelBuilder.Entity("EFGetStarted.Market", b =>
                {
                    b.Property<int>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShopCount")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShopsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("MarketId");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("EFGetStarted.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("EFGetStarted.OptionValue", b =>
                {
                    b.Property<int>("OptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionValueId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionValue");
                });

            modelBuilder.Entity("EFGetStarted.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShopId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MarketId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ShopId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EFGetStarted.ProductMOptionValue", b =>
                {
                    b.Property<int>("ProductMOptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductMOptionValueId");

                    b.HasIndex("MOptionId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductMOptionValue");
                });

            modelBuilder.Entity("EFGetStarted.ProductOptionValue", b =>
                {
                    b.Property<int>("ProductOptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionValueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductOptionValueId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionValueId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionValue");
                });

            modelBuilder.Entity("EFGetStarted.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("EFGetStarted.ProductTypeMOption", b =>
                {
                    b.Property<int>("ProductTypeMOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MOptionValueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductTypeMOptionId");

                    b.HasIndex("MOptionId");

                    b.HasIndex("MOptionValueId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeMOption");
                });

            modelBuilder.Entity("EFGetStarted.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTypesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShopId");

                    b.HasIndex("MarketId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("EFGetStarted.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoginId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("EFGetStarted.Admin", b =>
                {
                    b.HasOne("EFGetStarted.Login", "Login")
                        .WithOne("Admin")
                        .HasForeignKey("EFGetStarted.Admin", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.Shop", "Shop")
                        .WithMany("Admin")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFGetStarted.BrandModel", b =>
                {
                    b.HasOne("EFGetStarted.Brand", "Brand")
                        .WithMany("BrandModel")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.ProductType", "ProductType")
                        .WithMany("BrandModel")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EFGetStarted.Cart", b =>
                {
                    b.HasOne("EFGetStarted.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("EFGetStarted.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFGetStarted.CartProduct", b =>
                {
                    b.HasOne("EFGetStarted.Cart", "Cart")
                        .WithMany("CartProduct")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.Product", "Product")
                        .WithMany("CartProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFGetStarted.MOptionValue", b =>
                {
                    b.HasOne("EFGetStarted.MOption", "MOption")
                        .WithMany("MOptionValue")
                        .HasForeignKey("MOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MOption");
                });

            modelBuilder.Entity("EFGetStarted.Option", b =>
                {
                    b.HasOne("EFGetStarted.ProductType", "ProductType")
                        .WithMany("Option")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EFGetStarted.OptionValue", b =>
                {
                    b.HasOne("EFGetStarted.Option", "Option")
                        .WithMany("OptionValue")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("EFGetStarted.Product", b =>
                {
                    b.HasOne("EFGetStarted.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.Country", "Country")
                        .WithMany("Product")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.Market", "Market")
                        .WithMany("Product")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.ProductType", "ProductType")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.Shop", "Shop")
                        .WithMany("Product")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Market");

                    b.Navigation("ProductType");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFGetStarted.ProductMOptionValue", b =>
                {
                    b.HasOne("EFGetStarted.MOption", "MOption")
                        .WithMany("ProductMOptionValue")
                        .HasForeignKey("MOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.ProductType", "ProductType")
                        .WithMany("ProductMOptionValue")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MOption");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EFGetStarted.ProductOptionValue", b =>
                {
                    b.HasOne("EFGetStarted.Option", "Option")
                        .WithMany("ProductOptionValue")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.OptionValue", "OptionValue")
                        .WithMany("ProductOptionValue")
                        .HasForeignKey("OptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.Product", "Product")
                        .WithMany("ProductOptionValue")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("OptionValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFGetStarted.ProductType", b =>
                {
                    b.HasOne("EFGetStarted.Category", "Category")
                        .WithMany("ProductType")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EFGetStarted.ProductTypeMOption", b =>
                {
                    b.HasOne("EFGetStarted.MOption", "MOption")
                        .WithMany("ProductTypeMOption")
                        .HasForeignKey("MOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.MOptionValue", "MOptionValue")
                        .WithMany("ProductTypeMOption")
                        .HasForeignKey("MOptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.ProductType", "ProductType")
                        .WithMany("ProductTypeMOption")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MOption");

                    b.Navigation("MOptionValue");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EFGetStarted.Shop", b =>
                {
                    b.HasOne("EFGetStarted.Market", "Market")
                        .WithMany("Shop")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("EFGetStarted.User", b =>
                {
                    b.HasOne("EFGetStarted.Login", "Login")
                        .WithOne("User")
                        .HasForeignKey("EFGetStarted.User", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("EFGetStarted.Brand", b =>
                {
                    b.Navigation("BrandModel");
                });

            modelBuilder.Entity("EFGetStarted.Cart", b =>
                {
                    b.Navigation("CartProduct");
                });

            modelBuilder.Entity("EFGetStarted.Category", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EFGetStarted.Country", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFGetStarted.Login", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("EFGetStarted.MOption", b =>
                {
                    b.Navigation("MOptionValue");

                    b.Navigation("ProductMOptionValue");

                    b.Navigation("ProductTypeMOption");
                });

            modelBuilder.Entity("EFGetStarted.MOptionValue", b =>
                {
                    b.Navigation("ProductTypeMOption");
                });

            modelBuilder.Entity("EFGetStarted.Market", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFGetStarted.Option", b =>
                {
                    b.Navigation("OptionValue");

                    b.Navigation("ProductOptionValue");
                });

            modelBuilder.Entity("EFGetStarted.OptionValue", b =>
                {
                    b.Navigation("ProductOptionValue");
                });

            modelBuilder.Entity("EFGetStarted.Product", b =>
                {
                    b.Navigation("CartProduct");

                    b.Navigation("ProductOptionValue");
                });

            modelBuilder.Entity("EFGetStarted.ProductType", b =>
                {
                    b.Navigation("BrandModel");

                    b.Navigation("Option");

                    b.Navigation("Product");

                    b.Navigation("ProductMOptionValue");

                    b.Navigation("ProductTypeMOption");
                });

            modelBuilder.Entity("EFGetStarted.Shop", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFGetStarted.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
